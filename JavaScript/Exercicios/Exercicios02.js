// Crie uma fun√ß√£o que retorna a string "Ol√°, " concatenada com um argumento text (a ser passado para a fun√ß√£o) e com ponto de exclama√ß√£o "!" no final.

const cumprimenar = name => console.log(`Ol√° ${name} !`);

cumprimenar('Jorge');

/**Escreva uma fun√ß√£o que receba a idade de uma pessoa em anos e retorne a mesma idade em dias.
üìï Obs: considere que um ano tem 365 dias. Desconsidere anos bissextos (com 366 dias) e
desconsidere tamb√©m dias decorridos desde o √∫ltimo anivers√°rio.
Exemplos:
converterIdadeEmAnosParaDias(25) // retornar√° 9125
converterIdadeEmAnosParaDias(70) // retornar√° 25550 */

const getDayOfBirday = (age) => age * 365;

console.log(getDayOfBirday(25));

/**Desenvolva uma fun√ß√£o que recebe dois par√¢metros, um √© a quantidade de horas trabalhadas por um
funcion√°rio num m√™s, e o quanto ele recebe por hora. O retorno da fun√ß√£o deve ser a string "Sal√°rio igual a R$
X", em que X √© o quanto o funcion√°rio ganhou no m√™s.
Exemplos:
calcularSalario(150, 40.5) // retornar√° "Sal√°rio igual a R$ 6075" */

const getSalary = (hours, valueHours) => {
  return `Sal√°rio igual a R$ ${hours * valueHours}`;
}

console.log(getSalary(150, 40.5));

/**Crie uma fun√ß√£o que recebe um n√∫mero (de 1 a 12ÓÇÇ e retorne o m√™s correspondente como uma string. Por
exemplo, se a entrada for 2, a fun√ß√£o dever√° retornar "fevereiro", pois este √© o 2¬∞ m√™s.
Exemplos:
nomeDoMes(1) // retornar√° "janeiro"
nomeDoMes(4) // retornar√° "abril" */

const getMouth = (number) => {  
  const mouths = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", "Julho", "Agosto","Setembro", "Outubro", "Novembro", "Dezembro"];

  if(mouths[number - 1] === undefined) {
    return `Invalid value for mouth`;
  }

  return mouths[number - 1];
}

console.log(getMouth(11));
console.log(getMouth(15));

// Crie uma fun√ß√£o que receba dois n√∫meros e retorne se o primeiro √© maior ou igual ao segundo.


const maiorOuIgual = ( n1, n2)=>{
  if(n1 > n2 || n1 === n2){
    console.log("true")
  }else console.log("false")
}

maiorOuIgual(0, 0) // retornar√° true
maiorOuIgual(0, "0") // retornar√° false
maiorOuIgual(5, 1) // retornar√° true

/**
  * Escreva uma fun√ß√£o que receba dois par√¢metros. O primeiro par√¢metro √© o elemento que repetir√°, enquanto
  que o segundo ser√° o n√∫mero de vezes que haver√° repeti√ß√£o. Um array ser√° retornado.
  Exemplos:
  repetir("c√≥digo", 2) // retornar√° ["c√≥digo", "c√≥digo"]
  repetir(7, 3) // retornar√° [7, 7, 7]

 */


 const repetir = (value, repete) => {
   const array = []

    for (let i = 0; i < repete; i++) {
      array[i] = value;     
    }

   return array;
 }


 console.log(repetir('C√≥digo', 3));
 console.log(repetir(7, 0))

 /**
  * Crie uma fun√ß√£o que receba uma array e retorne o primeiro e o √∫ltimo elemento desse array como um novo
  array:
  Exemplos:
  receberPrimeiroEUltimoElemento([7,14,"ol√°"]) // retornar√° [7, "ol√°"]
  receberPrimeiroEUltimoElemento([-100, "aplicativo", 16]) // retornar√° [-100, 16]

  */

  const receberPrimeiroEUltimoElemento = (array) => {
    const newArray = []
    newArray.push(array[0]); 
    newArray.push(array[array.length - 1])

    return newArray;
  }

  console.log(receberPrimeiroEUltimoElemento([-100, "aplicativo", 16]))

  /**
   * Quando temos um objeto e manipulamos seus atributos, adicionando, atualizando ou removendo-os, estamos
apenas modificando-o, mas, em ess√™ncia, o objeto continua o mesmo, ou seja a sua refer√™ncia de mem√≥ria √© a
mesma.
Num projeto que voc√™ est√° trabalhando, voc√™ foi designado a refatorar diversas fun√ß√µes para que fa√ßam
c√≥pias de objetos e manipulem os dados dessas c√≥pias, com o intuito de evitar efeitos indesej√°veis em
algumas situa√ß√µes devido a refer√™ncias a objetos. Abaixo, est√° a descri√ß√£o de uma dessas fun√ß√µes.
Voc√™ escrever√° uma fun√ß√£o que recebe um objeto como primeiro par√¢metro e, como segundo par√¢metro, o
nome de uma propriedade contida nesse objeto. Em seguida, retorne uma c√≥pia desse objeto sem a
propriedade especificada no segundo par√¢metro.
Exerc√≠cios - Curso Fundamentos de Programa√ß√£o
 2
Exemplos:
removerPropriedade({a: 1, b: 2}, "a") // retornar√° {b: 2}
removerPropriedade({
id: 20,
nome: "caneta",
descricao: "N√£o preenchido"
}, "descricao") // retornar√° {id: 20, nome: "caneta"}
üí°
 A removerPropriedade, fim de testar se o objeto voc√™ poder√° retornado usar n√£o a fun√ß√£o √© o mesmo Object.is(), que foi por passado exemplo:
 como par√¢metro para a fun√ß√£o
Object.is(removerPropriedade(objeto, "descricao"), objeto)
Retornar√° false se o objeto n√£o for o mesmo.

 */


 const removerPropriedade = (obj, prop) => {
  const newObj = {}

  Object.assign(newObj, obj);
  delete newObj[prop];

  console.log(Object.is(newObj, obj))

  return newObj;
}

console.log(removerPropriedade({a: 1, b: 2}, "a"));

console.log(removerPropriedade({
  id: 20,
  nome: "caneta",
  descricao: "N√£o preenchido"
  }, "descricao"))


  /**
   * Crie uma fun√ß√£o que receba um array de elementos e retorne um array somente com os n√∫meros presentes no
  array recebido como par√¢metro.
  Exemplos:
  filtrarNumeros(["Javascript", 1, "3", "Web", 20]) // retornar√° [1, 20]
  filtrarNumeros(["a", "c"]) // retornar√° []

   */

   const filtrarNumeros = (array) => {
     const arrayNumber = array.filter((n) =>{
        return typeof n === 'number'
     })

     return arrayNumber;
   }

   console.log(filtrarNumeros(["Javascript", 1, "3", "Web", 20]))

   // Escreva uma fun√ß√£o que receba um array de n√∫meros e retornar√° a soma de todos os n√∫meros desse array.
const somarNumeros = (numbers) =>{
  let soma = 0;
  numbers.forEach((n) => {
    soma+= n;
  });

  return soma;
}

console.log(somarNumeros([10, 10, 10])) // retornar√° 30
somarNumeros([15, 15, 15, 15]) // retornar√° 60

/**
 * Voc√™ est√° trabalhando numa aplica√ß√£o pessoal de controle de despesas. Na tela principal dessa aplica√ß√£o, √©
poss√≠vel adicionar produtos ou servi√ßos, informando nome, categoria e pre√ßo. Uma funcionalidade que voc√™
est√° desenvolvendo no momento √© a de somar o total das despesas.
Crie uma fun√ß√£o que receba um array de produtos e retorne o total das despesas.

*/


const despesasTotais = (produtos) => {
  let despesas = 0;

  produtos.map((produto) => {
    despesas += produto.preco;
  })

  return despesas
}

console.log(despesasTotais([
  {nome: "Jornal online", categoria: "Informa√ß√£o", preco: 89.99},
  {nome: "Cinema", categoria: "Entretenimento", preco: 150}
  ]));

